{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1ea23b75",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "from PIL import Image, ImageTk\n",
    "import openpyxl as xl\n",
    "from openpyxl.styles import Font, PatternFill\n",
    "import webbrowser\n",
    "\n",
    "opening_image = None\n",
    "\n",
    "# Function to calculate BMI and save records\n",
    "def calculate_bmi():\n",
    "    name = name_entry.get().strip()\n",
    "    age = age_entry.get().strip()\n",
    "    weight = float(weight_entry.get().strip())\n",
    "    height = float(height_entry.get().strip())\n",
    "    date = date_entry.get().strip()\n",
    "\n",
    "    # Calculate BMI\n",
    "    bmi = weight / (height ** 2)\n",
    "\n",
    "    # Categorize BMI\n",
    "    if bmi < 18.5:\n",
    "        category = \"Underweight\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "    elif bmi < 24.9:\n",
    "        category = \"Normal Weight\"\n",
    "        category_color = \"00FF00\"  # Green\n",
    "    elif bmi < 29.9:\n",
    "        category = \"Overweight\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "    else:\n",
    "        category = \"Obesity\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "\n",
    "    # Display BMI and category\n",
    "    result_label.config(text=f\"BMI: {bmi:.2f}\")\n",
    "    category_label.config(text=f\"Category: {category}\")\n",
    "\n",
    "    # Save record to Excel spreadsheet\n",
    "    workbook = xl.load_workbook(\"bmi_records.xlsx\")\n",
    "\n",
    "    if name in workbook.sheetnames:\n",
    "        sheet = workbook[name]\n",
    "        max_row = sheet.max_row\n",
    "        sheet.cell(row=max_row + 1, column=1).value = date\n",
    "        sheet.cell(row=max_row + 1, column=2).value = bmi\n",
    "        sheet.cell(row=max_row + 1, column=3).value = category\n",
    "    else:\n",
    "        sheet = workbook.create_sheet(name)\n",
    "        sheet.cell(row=1, column=1).value = \"Date\"\n",
    "        sheet.cell(row=1, column=2).value = \"BMI\"\n",
    "        sheet.cell(row=1, column=3).value = \"Category\"\n",
    "        sheet.cell(row=2, column=1).value = date\n",
    "        sheet.cell(row=2, column=2).value = bmi\n",
    "        sheet.cell(row=2, column=3).value = category\n",
    "\n",
    "    # Color code the category cell\n",
    "    fill = PatternFill(start_color=category_color, end_color=category_color, fill_type=\"solid\")\n",
    "    sheet.cell(row=max_row + 1, column=3).fill = fill\n",
    "\n",
    "    # Set font style for the headers\n",
    "    font = Font(bold=True)\n",
    "    for cell in sheet[\"1:1\"]:\n",
    "        cell.font = font\n",
    "\n",
    "    # Save the workbook\n",
    "    workbook.save(\"bmi_records.xlsx\")\n",
    "\n",
    "    # Clear input fields\n",
    "    name_entry.delete(0, tk.END)\n",
    "    age_entry.delete(0, tk.END)\n",
    "    weight_entry.delete(0, tk.END)\n",
    "    height_entry.delete(0, tk.END)\n",
    "    date_entry.delete(0, tk.END)\n",
    "\n",
    "    # Show success message\n",
    "    messagebox.showinfo(\"BMI Calculator\", \"BMI calculation and record saved successfully!\")\n",
    "\n",
    "# Function to display the opening page\n",
    "def show_opening_page():\n",
    "    opening_page = tk.Toplevel(window)\n",
    "    opening_page.title(\"BMI Calculator - Opening Page\")\n",
    "\n",
    "    # Opening page text\n",
    "    opening_text = \"\"\"BMI is used to categorize people’s weight. BMI charts are mainly used for working out the health of populations rather than individuals.\n",
    "\n",
    "Within a population, there will always be people who are at the extremes (have a high BMI or low BMI).\n",
    "\n",
    "A high or low BMI may be an indicator of poor diet, varying activity levels, or high stress. Just because someone has a ‘normal BMI’ does not mean that they are healthy.\n",
    "\n",
    "BMI doesn’t take account of body composition, for example, muscle, fat, bone density. Sex and other factors which can impact your weight can also lead to an inaccurate reading. As such, a BMI calculation is not a suitable measure for some people, including children and young people under 18, pregnant women, and athletes.\"\"\"\n",
    "\n",
    "    opening_label = tk.Label(opening_page, text=opening_text, wraplength=400, justify=\"left\")\n",
    "    opening_label.pack(padx=20, pady=10)\n",
    "\n",
    "    # Load and display the image\n",
    "    global opening_image\n",
    "    image = Image.open(\"BMI_Chart.jpg\")\n",
    "    image = image.resize((int(image.width * 0.7), int(image.height * 0.7)))  # Reduce size by 30%\n",
    "    opening_image = ImageTk.PhotoImage(image)\n",
    "    image_label = tk.Label(opening_page, image=opening_image)\n",
    "    image_label.pack(padx=20, pady=10)\n",
    "\n",
    "    # Button to open the BMI Calculator\n",
    "    bmi_calculator_button = tk.Button(opening_page, text=\"Go to BMI Calculator\", command=show_bmi_calculator)\n",
    "    bmi_calculator_button.pack(pady=10)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(opening_page, text=\"Exit\", command=window.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Function to display the Category Advice page\n",
    "def show_category_advice():\n",
    "    category_advice_page = tk.Toplevel(window)\n",
    "    category_advice_page.title(\"Category Advice\")\n",
    "\n",
    "    # Underweight category button\n",
    "    underweight_button = tk.Button(category_advice_page, text=\"Underweight\", command=lambda: webbrowser.open(\"https://www.healthdirect.gov.au/what-to-do-if-you-are-underweight#:~:text=Even%20if%20you%20are%20underweight,based%20smoothies%20and%20dried%20fruit.\"))\n",
    "    underweight_button.pack(pady=5)\n",
    "\n",
    "    # Normal weight category button\n",
    "    normal_weight_button = tk.Button(category_advice_page, text=\"Normal Weight\", command=lambda: webbrowser.open(\"https://www.livi.co.uk/your-health/5-simple-tips-for-a-healthy-bmi/\"))\n",
    "    normal_weight_button.pack(pady=5)\n",
    "\n",
    "    # Overweight category button\n",
    "    overweight_button = tk.Button(category_advice_page, text=\"Overweight\", command=lambda: webbrowser.open(\"https://www.everydayhealth.com/diet-nutrition/bmi/how-you-reduce-your-bmi-science-backed-steps/\"))\n",
    "    overweight_button.pack(pady=5)\n",
    "\n",
    "    # Obesity category button\n",
    "    obesity_button = tk.Button(category_advice_page, text=\"Obesity\", command=lambda: webbrowser.open(\"https://www.nhs.uk/conditions/obesity/treatment/\"))\n",
    "    obesity_button.pack(pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(category_advice_page, text=\"Exit\", command=category_advice_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Create the main window\n",
    "window = tk.Tk()\n",
    "window.title(\"BMI Calculator\")\n",
    "\n",
    "# Show the opening page\n",
    "show_opening_page()\n",
    "\n",
    "# Create an opening page button\n",
    "opening_page_button = tk.Button(window, text=\"Opening Page\", command=show_opening_page)\n",
    "opening_page_button.pack(pady=10)\n",
    "\n",
    "# Create input fields\n",
    "input_frame = tk.Frame(window)\n",
    "input_frame.pack()\n",
    "\n",
    "name_label = tk.Label(input_frame, text=\"Name:\")\n",
    "name_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "name_entry = tk.Entry(input_frame)\n",
    "name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "age_label = tk.Label(input_frame, text=\"Age:\")\n",
    "age_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "age_entry = tk.Entry(input_frame)\n",
    "age_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "weight_label = tk.Label(input_frame, text=\"Weight (kg):\")\n",
    "weight_label.grid(row=2, column=0, padx=10, pady=5)\n",
    "weight_entry = tk.Entry(input_frame)\n",
    "weight_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "height_label = tk.Label(input_frame, text=\"Height (m):\")\n",
    "height_label.grid(row=3, column=0, padx=10, pady=5)\n",
    "height_entry = tk.Entry(input_frame)\n",
    "height_entry.grid(row=3, column=1, padx=10, pady=5)\n",
    "\n",
    "date_label = tk.Label(input_frame, text=\"Date (DD/MM/YYYY):\")\n",
    "date_label.grid(row=4, column=0, padx=10, pady=5)\n",
    "date_entry = tk.Entry(input_frame)\n",
    "date_entry.grid(row=4, column=1, padx=10, pady=5)\n",
    "\n",
    "# Create a calculate button\n",
    "calculate_button = tk.Button(window, text=\"Calculate\", command=calculate_bmi)\n",
    "calculate_button.pack(pady=10)\n",
    "\n",
    "# Display BMI and category\n",
    "result_frame = tk.Frame(window)\n",
    "result_frame.pack()\n",
    "\n",
    "result_label = tk.Label(result_frame, text=\"BMI: \")\n",
    "result_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "category_label = tk.Label(result_frame, text=\"Category: \")\n",
    "category_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "\n",
    "# Create a button to open the Category Advice page\n",
    "category_advice_button = tk.Button(window, text=\"Category Advice\", command=show_category_advice)\n",
    "category_advice_button.pack(pady=10)\n",
    "\n",
    "# Create an exit button on the main window\n",
    "exit_button_main = tk.Button(window, text=\"Exit\", command=window.destroy)\n",
    "exit_button_main.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Load the Excel spreadsheet (create a new one if not exist)\n",
    "try:\n",
    "    workbook = xl.load_workbook(\"bmi_records.xlsx\")\n",
    "except FileNotFoundError:\n",
    "    workbook = xl.Workbook()\n",
    "    workbook.save(\"bmi_records.xlsx\")\n",
    "\n",
    "# Start the main event loop\n",
    "window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "af5b4f66",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\3849758159.py:163: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  opening_image = opening_image.resize((300, 300), Image.ANTIALIAS)\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "from PIL import Image, ImageTk\n",
    "import openpyxl as xl\n",
    "from openpyxl.styles import Font, PatternFill\n",
    "import webbrowser\n",
    "\n",
    "opening_image = None\n",
    "\n",
    "# Function to calculate BMI and save records\n",
    "def calculate_bmi():\n",
    "    name = name_entry.get().strip()\n",
    "    age = age_entry.get().strip()\n",
    "    weight = float(weight_entry.get().strip())\n",
    "    height = float(height_entry.get().strip())\n",
    "    date = date_entry.get().strip()\n",
    "\n",
    "    # Calculate BMI\n",
    "    bmi = weight / (height ** 2)\n",
    "\n",
    "    # Categorize BMI\n",
    "    if bmi < 18.5:\n",
    "        category = \"Underweight\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "    elif bmi < 24.9:\n",
    "        category = \"Normal Weight\"\n",
    "        category_color = \"00FF00\"  # Green\n",
    "    elif bmi < 29.9:\n",
    "        category = \"Overweight\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "    else:\n",
    "        category = \"Obesity\"\n",
    "        category_color = \"FF0000\"  # Red\n",
    "\n",
    "    # Display BMI and category\n",
    "    result_label.config(text=f\"BMI: {bmi:.2f}\")\n",
    "    category_label.config(text=f\"Category: {category}\")\n",
    "\n",
    "    # Save record to Excel spreadsheet\n",
    "    workbook = xl.load_workbook(\"bmi_records.xlsx\")\n",
    "\n",
    "    if name in workbook.sheetnames:\n",
    "        sheet = workbook[name]\n",
    "        max_row = sheet.max_row\n",
    "        sheet.cell(row=max_row + 1, column=1).value = date\n",
    "        sheet.cell(row=max_row + 1, column=2).value = bmi\n",
    "        sheet.cell(row=max_row + 1, column=3).value = category\n",
    "    else:\n",
    "        sheet = workbook.create_sheet(name)\n",
    "        sheet.cell(row=1, column=1).value = \"Date\"\n",
    "        sheet.cell(row=1, column=2).value = \"BMI\"\n",
    "        sheet.cell(row=1, column=3).value = \"Category\"\n",
    "        sheet.cell(row=2, column=1).value = date\n",
    "        sheet.cell(row=2, column=2).value = bmi\n",
    "        sheet.cell(row=2, column=3).value = category\n",
    "\n",
    "    # Color code the category cell\n",
    "    fill = PatternFill(start_color=category_color, end_color=category_color, fill_type=\"solid\")\n",
    "    sheet.cell(row=max_row + 1, column=3).fill = fill\n",
    "\n",
    "    # Set font style for the headers\n",
    "    font = Font(bold=True)\n",
    "    for cell in sheet[\"1:1\"]:\n",
    "        cell.font = font\n",
    "\n",
    "    # Save the workbook\n",
    "    workbook.save(\"bmi_records.xlsx\")\n",
    "\n",
    "    # Clear input fields\n",
    "    name_entry.delete(0, tk.END)\n",
    "    age_entry.delete(0, tk.END)\n",
    "    weight_entry.delete(0, tk.END)\n",
    "    height_entry.delete(0, tk.END)\n",
    "    date_entry.delete(0, tk.END)\n",
    "\n",
    "    # Show success message\n",
    "    messagebox.showinfo(\"BMI Calculator\", \"BMI calculation and record saved successfully!\")\n",
    "\n",
    "# Function to display the Category Advice page\n",
    "def show_category_advice():\n",
    "    category_advice_page = tk.Toplevel(window)\n",
    "    category_advice_page.title(\"Category Advice\")\n",
    "\n",
    "    # Underweight category button\n",
    "    underweight_button = tk.Button(category_advice_page, text=\"Underweight\", command=lambda: webbrowser.open(\"https://www.healthdirect.gov.au/what-to-do-if-you-are-underweight#:~:text=Even%20if%20you%20are%20underweight,based%20smoothies%20and%20dried%20fruit.\"))\n",
    "    underweight_button.pack(pady=5)\n",
    "\n",
    "    # Normal weight category button\n",
    "    normal_weight_button = tk.Button(category_advice_page, text=\"Normal Weight\", command=lambda: webbrowser.open(\"https://www.livi.co.uk/your-health/5-simple-tips-for-a-healthy-bmi/\"))\n",
    "    normal_weight_button.pack(pady=5)\n",
    "\n",
    "    # Overweight category button\n",
    "    overweight_button = tk.Button(category_advice_page, text=\"Overweight\", command=lambda: webbrowser.open(\"https://www.everydayhealth.com/diet-nutrition/bmi/how-you-reduce-your-bmi-science-backed-steps/\"))\n",
    "    overweight_button.pack(pady=5)\n",
    "\n",
    "    # Obesity category button\n",
    "    obesity_button = tk.Button(category_advice_page, text=\"Obesity\", command=lambda: webbrowser.open(\"https://www.nhs.uk/conditions/obesity/treatment/\"))\n",
    "    obesity_button.pack(pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(category_advice_page, text=\"Exit\", command=category_advice_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Function to display the BMI Calculator page\n",
    "def show_bmi_calculator():\n",
    "    bmi_calculator_page = tk.Toplevel(window)\n",
    "    bmi_calculator_page.title(\"BMI Calculator\")\n",
    "\n",
    "    # Create input fields\n",
    "    input_frame = tk.Frame(bmi_calculator_page)\n",
    "    input_frame.pack()\n",
    "\n",
    "    name_label = tk.Label(input_frame, text=\"Name:\")\n",
    "    name_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "    name_entry = tk.Entry(input_frame)\n",
    "    name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "    age_label = tk.Label(input_frame, text=\"Age:\")\n",
    "    age_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "    age_entry = tk.Entry(input_frame)\n",
    "    age_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "    weight_label = tk.Label(input_frame, text=\"Weight (kg):\")\n",
    "    weight_label.grid(row=2, column=0, padx=10, pady=5)\n",
    "    weight_entry = tk.Entry(input_frame)\n",
    "    weight_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "    height_label = tk.Label(input_frame, text=\"Height (m):\")\n",
    "    height_label.grid(row=3, column=0, padx=10, pady=5)\n",
    "    height_entry = tk.Entry(input_frame)\n",
    "    height_entry.grid(row=3, column=1, padx=10, pady=5)\n",
    "\n",
    "    date_label = tk.Label(input_frame, text=\"Date (DD/MM/YYYY):\")\n",
    "    date_label.grid(row=4, column=0, padx=10, pady=5)\n",
    "    date_entry = tk.Entry(input_frame)\n",
    "    date_entry.grid(row=4, column=1, padx=10, pady=5)\n",
    "\n",
    "    # Create a calculate button\n",
    "    calculate_button = tk.Button(bmi_calculator_page, text=\"Calculate\", command=calculate_bmi)\n",
    "    calculate_button.pack(pady=10)\n",
    "\n",
    "    # Display BMI and category\n",
    "    result_frame = tk.Frame(bmi_calculator_page)\n",
    "    result_frame.pack()\n",
    "\n",
    "    result_label = tk.Label(result_frame, text=\"BMI: \")\n",
    "    result_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "    category_label = tk.Label(result_frame, text=\"Category: \")\n",
    "    category_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(bmi_calculator_page, text=\"Exit\", command=bmi_calculator_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Create main window\n",
    "window = tk.Tk()\n",
    "window.title(\"BMI Calculator\")\n",
    "\n",
    "# Load and display the opening image\n",
    "try:\n",
    "    opening_image = Image.open(\"BMI_Chart.jpg\")\n",
    "    opening_image = opening_image.resize((300, 300), Image.ANTIALIAS)\n",
    "    opening_image = ImageTk.PhotoImage(opening_image)\n",
    "    image_label = tk.Label(window, image=opening_image)\n",
    "    image_label.pack(pady=10)\n",
    "except:\n",
    "    messagebox.showerror(\"BMI Calculator\", \"Failed to load the opening image.\")\n",
    "\n",
    "# Create buttons on the opening page\n",
    "button_frame = tk.Frame(window)\n",
    "button_frame.pack()\n",
    "\n",
    "calculator_button = tk.Button(button_frame, text=\"BMI Calculator\", command=show_bmi_calculator)\n",
    "calculator_button.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "advice_button = tk.Button(button_frame, text=\"Category Advice\", command=show_category_advice)\n",
    "advice_button.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "# Exit button\n",
    "exit_button = tk.Button(window, text=\"Exit\", command=window.destroy)\n",
    "exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Start the main loop\n",
    "window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "31a316d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\2020595097.py:106: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from PIL import Image, ImageTk\n",
    "import webbrowser\n",
    "from tkinter import messagebox\n",
    "\n",
    "\n",
    "# Function to open the BMI Category Advice page\n",
    "def show_category_advice():\n",
    "    category_advice_page = tk.Toplevel(window)\n",
    "    category_advice_page.title(\"Category Advice\")\n",
    "\n",
    "    # Opening text\n",
    "    opening_text = \"\"\"\n",
    "    Welcome to the BMI Category Advice page!\n",
    "    \n",
    "    Please select your BMI category to get specific advice and resources.\n",
    "    \"\"\"\n",
    "    opening_label = tk.Label(category_advice_page, text=opening_text, wraplength=300, justify=\"center\")\n",
    "    opening_label.pack(pady=10)\n",
    "\n",
    "    # Underweight category button\n",
    "    underweight_button = tk.Button(category_advice_page, text=\"Underweight\",\n",
    "                                   command=lambda: webbrowser.open(\n",
    "                                       \"https://www.medicalnewstoday.com/articles/321744#can-diet-help\"))\n",
    "    underweight_button.pack(pady=5)\n",
    "\n",
    "    # Normal weight category button\n",
    "    normal_weight_button = tk.Button(category_advice_page, text=\"Normal Weight\",\n",
    "                                     command=lambda: webbrowser.open(\n",
    "                                         \"https://www.livi.co.uk/your-health/5-simple-tips-for-a-healthy-bmi/\"))\n",
    "    normal_weight_button.pack(pady=5)\n",
    "\n",
    "    # Overweight category button\n",
    "    overweight_button = tk.Button(category_advice_page, text=\"Overweight\",\n",
    "                                  command=lambda: webbrowser.open(\n",
    "                                      \"https://www.everydayhealth.com/diet-nutrition/bmi/how-you-reduce-your-bmi-science-backed-steps/\"))\n",
    "    overweight_button.pack(pady=5)\n",
    "\n",
    "    # Obesity category button\n",
    "    obesity_button = tk.Button(category_advice_page, text=\"Obesity\",\n",
    "                               command=lambda: webbrowser.open(\"https://www.nhs.uk/conditions/obesity/treatment/\"))\n",
    "    obesity_button.pack(pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(category_advice_page, text=\"Exit\", command=category_advice_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Function to display the BMI Calculator page\n",
    "def show_bmi_calculator():\n",
    "    bmi_calculator_page = tk.Toplevel(window)\n",
    "    bmi_calculator_page.title(\"BMI Calculator\")\n",
    "\n",
    "    # Create input fields\n",
    "    input_frame = tk.Frame(bmi_calculator_page)\n",
    "    input_frame.pack()\n",
    "\n",
    "    name_label = tk.Label(input_frame, text=\"Name:\")\n",
    "    name_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "    name_entry = tk.Entry(input_frame)\n",
    "    name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "    age_label = tk.Label(input_frame, text=\"Age:\")\n",
    "    age_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "    age_entry = tk.Entry(input_frame)\n",
    "    age_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "    weight_label = tk.Label(input_frame, text=\"Weight (kg):\")\n",
    "    weight_label.grid(row=2, column=0, padx=10, pady=5)\n",
    "    weight_entry = tk.Entry(input_frame)\n",
    "    weight_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "    height_label = tk.Label(input_frame, text=\"Height (m):\")\n",
    "    height_label.grid(row=3, column=0, padx=10, pady=5)\n",
    "    height_entry = tk.Entry(input_frame)\n",
    "    height_entry.grid(row=3, column=1, padx=10, pady=5)\n",
    "\n",
    "    date_label = tk.Label(input_frame, text=\"Date:\")\n",
    "    date_label.grid(row=4, column=0, padx=10, pady=5)\n",
    "    date_entry = tk.Entry(input_frame)\n",
    "    date_entry.grid(row=4, column=1, padx=10, pady=5)\n",
    "\n",
    "    # Calculate BMI function\n",
    "    def calculate_bmi():\n",
    "        weight = float(weight_entry.get())\n",
    "        height = float(height_entry.get())\n",
    "        bmi = weight / (height ** 2)\n",
    "        messagebox.showinfo(\"BMI Result\", f\"Your BMI is: {bmi:.2f}\")\n",
    "\n",
    "    # Calculate button\n",
    "    calculate_button = tk.Button(bmi_calculator_page, text=\"Calculate BMI\", command=calculate_bmi)\n",
    "    calculate_button.pack(pady=10)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(bmi_calculator_page, text=\"Exit\", command=bmi_calculator_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Create main window\n",
    "window = tk.Tk()\n",
    "window.title(\"BMI Calculator\")\n",
    "\n",
    "# Load and display the opening image\n",
    "try:\n",
    "    opening_image = Image.open(\"BMI_Chart.jpg\")\n",
    "    opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n",
    "    opening_image = ImageTk.PhotoImage(opening_image)\n",
    "    image_label = tk.Label(window, image=opening_image)\n",
    "    image_label.pack(pady=10)\n",
    "except:\n",
    "    messagebox.showerror(\"BMI Calculator\", \"Failed to load the opening image.\")\n",
    "\n",
    "# Opening text\n",
    "opening_text = \"\"\"\n",
    "Welcome to the BMI Calculator!\n",
    "\n",
    "BMI is used to categorize people’s weight. BMI charts are mainly used for working out the health of populations rather than individuals.\n",
    "\n",
    "Within a population, there will always be people who are at the extremes (have a high BMI or low BMI).\n",
    "\n",
    "A high or low BMI may be an indicator of poor diet, varying activity levels, or high stress. Just because someone has a ‘normal BMI’ does not mean that they are healthy.\n",
    "\n",
    "BMI doesn’t take account of body composition, for example, muscle, fat, bone density. Sex and other factors which can impact your weight can also lead to an inaccurate reading. As such, a BMI calculation is not a suitable measure for some people, including children and young people under 18, pregnant women, and athletes.\n",
    "\n",
    "Please select an option to proceed.\n",
    "\"\"\"\n",
    "opening_label = tk.Label(window, text=opening_text, wraplength=700, justify=\"center\")\n",
    "opening_label.pack()\n",
    "\n",
    "# Create buttons on the opening page\n",
    "button_frame = tk.Frame(window)\n",
    "button_frame.pack()\n",
    "\n",
    "calculator_button = tk.Button(button_frame, text=\"BMI Calculator\", command=show_bmi_calculator)\n",
    "calculator_button.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "advice_button = tk.Button(button_frame, text=\"Category Advice\", command=show_category_advice)\n",
    "advice_button.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "# Exit button\n",
    "exit_button = tk.Button(window, text=\"Exit\", command=window.destroy)\n",
    "exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Start the main loop\n",
    "window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "83b6c35d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\2274825216.py:124: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from PIL import Image, ImageTk\n",
    "import webbrowser\n",
    "from tkinter import messagebox\n",
    "\n",
    "\n",
    "# Function to open the BMI Category Advice page\n",
    "def show_category_advice():\n",
    "    category_advice_page = tk.Toplevel(window)\n",
    "    category_advice_page.title(\"Category Advice\")\n",
    "\n",
    "    # Opening text\n",
    "    opening_text = \"\"\"\n",
    "    Welcome to the BMI Category Advice page!\n",
    "    \n",
    "    Please select your BMI category to get specific advice and resources.\n",
    "    \"\"\"\n",
    "    opening_label = tk.Label(category_advice_page, text=opening_text, wraplength=300, justify=\"center\")\n",
    "    opening_label.pack(pady=10)\n",
    "\n",
    "    # Underweight category button\n",
    "    underweight_button = tk.Button(category_advice_page, text=\"Underweight\",\n",
    "                                   command=lambda: webbrowser.open(\n",
    "                                       \"https://www.medicalnewstoday.com/articles/321744#can-diet-help\"))\n",
    "    underweight_button.pack(pady=5)\n",
    "\n",
    "    # Normal weight category button\n",
    "    normal_weight_button = tk.Button(category_advice_page, text=\"Normal Weight\",\n",
    "                                     command=lambda: webbrowser.open(\n",
    "                                         \"https://www.livi.co.uk/your-health/5-simple-tips-for-a-healthy-bmi/\"))\n",
    "    normal_weight_button.pack(pady=5)\n",
    "\n",
    "    # Overweight category button\n",
    "    overweight_button = tk.Button(category_advice_page, text=\"Overweight\",\n",
    "                                  command=lambda: webbrowser.open(\n",
    "                                      \"https://www.everydayhealth.com/diet-nutrition/bmi/how-you-reduce-your-bmi-science-backed-steps/\"))\n",
    "    overweight_button.pack(pady=5)\n",
    "\n",
    "    # Obesity category button\n",
    "    obesity_button = tk.Button(category_advice_page, text=\"Obesity\",\n",
    "                               command=lambda: webbrowser.open(\"https://www.nhs.uk/conditions/obesity/treatment/\"))\n",
    "    obesity_button.pack(pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(category_advice_page, text=\"Exit\", command=category_advice_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Function to display the BMI Calculator page\n",
    "def show_bmi_calculator():\n",
    "    bmi_calculator_page = tk.Toplevel(window)\n",
    "    bmi_calculator_page.title(\"BMI Calculator\")\n",
    "\n",
    "    # Create input fields\n",
    "    input_frame = tk.Frame(bmi_calculator_page)\n",
    "    input_frame.pack()\n",
    "\n",
    "    name_label = tk.Label(input_frame, text=\"Name:\")\n",
    "    name_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "    name_entry = tk.Entry(input_frame)\n",
    "    name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "    age_label = tk.Label(input_frame, text=\"Age:\")\n",
    "    age_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "    age_entry = tk.Entry(input_frame)\n",
    "    age_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "    weight_label = tk.Label(input_frame, text=\"Weight (kg):\")\n",
    "    weight_label.grid(row=2, column=0, padx=10, pady=5)\n",
    "    weight_entry = tk.Entry(input_frame)\n",
    "    weight_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "    height_label = tk.Label(input_frame, text=\"Height (m):\")\n",
    "    height_label.grid(row=3, column=0, padx=10, pady=5)\n",
    "    height_entry = tk.Entry(input_frame)\n",
    "    height_entry.grid(row=3, column=1, padx=10, pady=5)\n",
    "\n",
    "    date_label = tk.Label(input_frame, text=\"Date:\")\n",
    "    date_label.grid(row=4, column=0, padx=10, pady=5)\n",
    "    date_entry = tk.Entry(input_frame)\n",
    "    date_entry.grid(row=4, column=1, padx=10, pady=5)\n",
    "\n",
    "    # Calculate BMI function\n",
    "    def calculate_bmi():\n",
    "        weight = float(weight_entry.get())\n",
    "        height = float(height_entry.get())\n",
    "        bmi = weight / (height ** 2)\n",
    "\n",
    "        # Categorize BMI\n",
    "        category = \"\"\n",
    "        if bmi < 18.5:\n",
    "            category = \"Underweight\"\n",
    "        elif 18.5 <= bmi < 25:\n",
    "            category = \"Normal Weight\"\n",
    "        elif 25 <= bmi < 30:\n",
    "            category = \"Overweight\"\n",
    "        else:\n",
    "            category = \"Obesity\"\n",
    "\n",
    "        # Show BMI and category\n",
    "        result_text = f\"Your BMI is: {bmi:.2f}\\nCategory: {category}\"\n",
    "        result_label.config(text=result_text)\n",
    "\n",
    "    # Calculate button\n",
    "    calculate_button = tk.Button(bmi_calculator_page, text=\"Calculate BMI\", command=calculate_bmi)\n",
    "    calculate_button.pack(pady=10)\n",
    "\n",
    "    # Result label\n",
    "    result_label = tk.Label(bmi_calculator_page, text=\"\", font=(\"Arial\", 12))\n",
    "    result_label.pack()\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(bmi_calculator_page, text=\"Exit\", command=bmi_calculator_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Create main window\n",
    "window = tk.Tk()\n",
    "window.title(\"BMI Calculator\")\n",
    "\n",
    "# Load and display the opening image\n",
    "try:\n",
    "    opening_image = Image.open(\"BMI_Chart.jpg\")\n",
    "    opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n",
    "    opening_image = ImageTk.PhotoImage(opening_image)\n",
    "    image_label = tk.Label(window, image=opening_image)\n",
    "    image_label.pack(pady=10)\n",
    "except:\n",
    "    messagebox.showerror(\"BMI Calculator\", \"Failed to load the opening image.\")\n",
    "\n",
    "# Opening text\n",
    "opening_text = \"\"\"\n",
    "Welcome to the BMI Calculator!\n",
    "\n",
    "BMI is used to categorize people’s weight. BMI charts are mainly used for working out the health of populations rather than individuals.\n",
    "\n",
    "Within a population, there will always be people who are at the extremes (have a high BMI or low BMI).\n",
    "\n",
    "A high or low BMI may be an indicator of poor diet, varying activity levels, or high stress. Just because someone has a ‘normal BMI’ does not mean that they are healthy.\n",
    "\n",
    "BMI doesn’t take account of body composition, for example, muscle, fat, bone density. Sex and other factors which can impact your weight can also lead to an inaccurate reading. As such, a BMI calculation is not a suitable measure for some people, including children and young people under 18, pregnant women, and athletes.\n",
    "\n",
    "Please select an option to proceed.\n",
    "\"\"\"\n",
    "opening_label = tk.Label(window, text=opening_text, wraplength=700, justify=\"center\")\n",
    "opening_label.pack()\n",
    "\n",
    "# Create buttons on the opening page\n",
    "button_frame = tk.Frame(window)\n",
    "button_frame.pack()\n",
    "\n",
    "calculator_button = tk.Button(button_frame, text=\"BMI Calculator\", command=show_bmi_calculator)\n",
    "calculator_button.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "advice_button = tk.Button(button_frame, text=\"Category Advice\", command=show_category_advice)\n",
    "advice_button.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "# Exit button\n",
    "exit_button = tk.Button(window, text=\"Exit\", command=window.destroy)\n",
    "exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Start the main loop\n",
    "window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39aa2630",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\763559564.py:158: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n",
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\ihassan\\Anaconda3\\lib\\tkinter\\__init__.py\", line 1892, in __call__\n",
      "    return self.func(*args)\n",
      "  File \"C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\763559564.py\", line 136, in calculate_bmi\n",
      "    workbook.save(\"bmi_records.xlsx\")\n",
      "  File \"C:\\Users\\ihassan\\Anaconda3\\lib\\site-packages\\openpyxl\\workbook\\workbook.py\", line 407, in save\n",
      "    save_workbook(self, filename)\n",
      "  File \"C:\\Users\\ihassan\\Anaconda3\\lib\\site-packages\\openpyxl\\writer\\excel.py\", line 291, in save_workbook\n",
      "    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n",
      "  File \"C:\\Users\\ihassan\\Anaconda3\\lib\\zipfile.py\", line 1248, in __init__\n",
      "    self.fp = io.open(file, filemode)\n",
      "PermissionError: [Errno 13] Permission denied: 'bmi_records.xlsx'\n",
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\ihassan\\Anaconda3\\lib\\tkinter\\__init__.py\", line 1892, in __call__\n",
      "    return self.func(*args)\n",
      "  File \"C:\\Users\\ihassan\\AppData\\Local\\Temp\\ipykernel_22332\\763559564.py\", line 126, in calculate_bmi\n",
      "    cell.font = Font(bold=True)\n",
      "AttributeError: 'tuple' object has no attribute 'font'\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from PIL import Image, ImageTk\n",
    "import webbrowser\n",
    "from tkinter import messagebox\n",
    "import openpyxl\n",
    "\n",
    "\n",
    "# Create or load the Excel workbook\n",
    "workbook = openpyxl.Workbook()\n",
    "try:\n",
    "    workbook = openpyxl.load_workbook(\"bmi_records.xlsx\")\n",
    "except FileNotFoundError:\n",
    "    workbook.save(\"bmi_records.xlsx\")\n",
    "\n",
    "# Function to open the BMI Category Advice page\n",
    "def show_category_advice():\n",
    "    category_advice_page = tk.Toplevel(window)\n",
    "    category_advice_page.title(\"Category Advice\")\n",
    "\n",
    "    # Opening text\n",
    "    opening_text = \"\"\"\n",
    "    Welcome to the BMI Category Advice page!\n",
    "    \n",
    "    Please select your BMI category to get specific advice and resources.\n",
    "    \"\"\"\n",
    "    opening_label = tk.Label(category_advice_page, text=opening_text, wraplength=300, justify=\"center\")\n",
    "    opening_label.pack(pady=10)\n",
    "\n",
    "    # Underweight category button\n",
    "    underweight_button = tk.Button(category_advice_page, text=\"Underweight\",\n",
    "                                   command=lambda: webbrowser.open(\n",
    "                                       \"https://www.medicalnewstoday.com/articles/321744#can-diet-help\"))\n",
    "    underweight_button.pack(pady=5)\n",
    "\n",
    "    # Normal weight category button\n",
    "    normal_weight_button = tk.Button(category_advice_page, text=\"Normal Weight\",\n",
    "                                     command=lambda: webbrowser.open(\n",
    "                                         \"https://www.livi.co.uk/your-health/5-simple-tips-for-a-healthy-bmi/\"))\n",
    "    normal_weight_button.pack(pady=5)\n",
    "\n",
    "    # Overweight category button\n",
    "    overweight_button = tk.Button(category_advice_page, text=\"Overweight\",\n",
    "                                  command=lambda: webbrowser.open(\n",
    "                                      \"https://www.everydayhealth.com/diet-nutrition/bmi/how-you-reduce-your-bmi-science-backed-steps/\"))\n",
    "    overweight_button.pack(pady=5)\n",
    "\n",
    "    # Obesity category button\n",
    "    obesity_button = tk.Button(category_advice_page, text=\"Obesity\",\n",
    "                               command=lambda: webbrowser.open(\"https://www.nhs.uk/conditions/obesity/treatment/\"))\n",
    "    obesity_button.pack(pady=5)\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(category_advice_page, text=\"Exit\", command=category_advice_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Function to display the BMI Calculator page\n",
    "def show_bmi_calculator():\n",
    "    bmi_calculator_page = tk.Toplevel(window)\n",
    "    bmi_calculator_page.title(\"BMI Calculator\")\n",
    "\n",
    "    # Create input fields\n",
    "    input_frame = tk.Frame(bmi_calculator_page)\n",
    "    input_frame.pack()\n",
    "\n",
    "    name_label = tk.Label(input_frame, text=\"Name:\")\n",
    "    name_label.grid(row=0, column=0, padx=10, pady=5)\n",
    "    name_entry = tk.Entry(input_frame)\n",
    "    name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "    age_label = tk.Label(input_frame, text=\"Age:\")\n",
    "    age_label.grid(row=1, column=0, padx=10, pady=5)\n",
    "    age_entry = tk.Entry(input_frame)\n",
    "    age_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "\n",
    "    weight_label = tk.Label(input_frame, text=\"Weight (kg):\")\n",
    "    weight_label.grid(row=2, column=0, padx=10, pady=5)\n",
    "    weight_entry = tk.Entry(input_frame)\n",
    "    weight_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "\n",
    "    height_label = tk.Label(input_frame, text=\"Height (m):\")\n",
    "    height_label.grid(row=3, column=0, padx=10, pady=5)\n",
    "    height_entry = tk.Entry(input_frame)\n",
    "    height_entry.grid(row=3, column=1, padx=10, pady=5)\n",
    "\n",
    "    date_label = tk.Label(input_frame, text=\"Date:\")\n",
    "    date_label.grid(row=4, column=0, padx=10, pady=5)\n",
    "    date_entry = tk.Entry(input_frame)\n",
    "    date_entry.grid(row=4, column=1, padx=10, pady=5)\n",
    "\n",
    "    # Calculate BMI function\n",
    "    def calculate_bmi():\n",
    "        weight = float(weight_entry.get())\n",
    "        height = float(height_entry.get())\n",
    "        bmi = weight / (height ** 2)\n",
    "\n",
    "        # Categorize BMI\n",
    "        category = \"\"\n",
    "        if bmi < 18.5:\n",
    "            category = \"Underweight\"\n",
    "        elif 18.5 <= bmi < 25:\n",
    "            category = \"Normal Weight\"\n",
    "        elif 25 <= bmi < 30:\n",
    "            category = \"Overweight\"\n",
    "        else:\n",
    "            category = \"Obesity\"\n",
    "\n",
    "        # Show BMI and category\n",
    "        result_text = f\"Your BMI is: {bmi:.2f}\\nCategory: {category}\"\n",
    "        result_label.config(text=result_text)\n",
    "        \n",
    "        # Save BMI details to Excel\n",
    "        name = name_entry.get()\n",
    "\n",
    "        if name in workbook.sheetnames:\n",
    "            sheet = workbook[name]\n",
    "            last_row = sheet.max_row + 1\n",
    "        else:\n",
    "            sheet = workbook.create_sheet(name)\n",
    "            sheet[\"A1\"] = \"Date\"\n",
    "            sheet[\"B1\"] = \"Age\"\n",
    "            sheet[\"C1\"] = \"Weight (kg)\"\n",
    "            sheet[\"D1\"] = \"BMI\"\n",
    "            sheet[\"E1\"] = \"BMI Category\"\n",
    "            for cell in sheet[\"A1:E1\"]:\n",
    "                cell.font = Font(bold=True)\n",
    "            last_row = 2\n",
    "            \n",
    "\n",
    "        sheet[f\"A{last_row}\"] = date_entry.get()\n",
    "        sheet[f\"B{last_row}\"] = age_entry.get()\n",
    "        sheet[f\"C{last_row}\"] = weight_entry.get()\n",
    "        sheet[f\"D{last_row}\"] = bmi\n",
    "        sheet[f\"E{last_row}\"] = category\n",
    "\n",
    "        workbook.save(\"bmi_records.xlsx\")\n",
    "\n",
    "    # Calculate button\n",
    "    calculate_button = tk.Button(bmi_calculator_page, text=\"Calculate BMI\", command=calculate_bmi)\n",
    "    calculate_button.pack(pady=10)\n",
    "\n",
    "    # Result label\n",
    "    result_label = tk.Label(bmi_calculator_page, text=\"\", font=(\"Arial\", 12))\n",
    "    result_label.pack()\n",
    "\n",
    "    # Exit button\n",
    "    exit_button = tk.Button(bmi_calculator_page, text=\"Exit\", command=bmi_calculator_page.destroy)\n",
    "    exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "\n",
    "# Create main window\n",
    "window = tk.Tk()\n",
    "window.title(\"BMI Calculator\")\n",
    "\n",
    "# Load and display the opening image\n",
    "try:\n",
    "    opening_image = Image.open(\"BMI_Chart.jpg\")\n",
    "    opening_image = opening_image.resize((700, 400), Image.ANTIALIAS)\n",
    "    opening_image = ImageTk.PhotoImage(opening_image)\n",
    "    image_label = tk.Label(window, image=opening_image)\n",
    "    image_label.pack(pady=10)\n",
    "except:\n",
    "    messagebox.showerror(\"BMI Calculator\", \"Failed to load the opening image.\")\n",
    "\n",
    "# Opening text\n",
    "opening_text = \"\"\"\n",
    "Welcome to the BMI Calculator!\n",
    "\n",
    "BMI is used to categorize people’s weight. BMI charts are mainly used for working out the health of populations rather than individuals.\n",
    "\n",
    "Within a population, there will always be people who are at the extremes (have a high BMI or low BMI).\n",
    "\n",
    "A high or low BMI may be an indicator of poor diet, varying activity levels, or high stress. Just because someone has a ‘normal BMI’ does not mean that they are healthy.\n",
    "\n",
    "BMI doesn’t take account of body composition, for example, muscle, fat, bone density. Sex and other factors which can impact your weight can also lead to an inaccurate reading. As such, a BMI calculation is not a suitable measure for some people, including children and young people under 18, pregnant women, and athletes.\n",
    "\n",
    "Please select an option to proceed.\n",
    "\"\"\"\n",
    "opening_label = tk.Label(window, text=opening_text, wraplength=700, justify=\"center\")\n",
    "opening_label.pack()\n",
    "\n",
    "# Create buttons on the opening page\n",
    "button_frame = tk.Frame(window)\n",
    "button_frame.pack()\n",
    "\n",
    "calculator_button = tk.Button(button_frame, text=\"BMI Calculator\", command=show_bmi_calculator)\n",
    "calculator_button.grid(row=0, column=0, padx=10, pady=5)\n",
    "\n",
    "advice_button = tk.Button(button_frame, text=\"Category Advice\", command=show_category_advice)\n",
    "advice_button.grid(row=0, column=1, padx=10, pady=5)\n",
    "\n",
    "# Exit button\n",
    "exit_button = tk.Button(window, text=\"Exit\", command=window.destroy)\n",
    "exit_button.pack(side=\"bottom\", pady=10)\n",
    "\n",
    "# Start the main loop\n",
    "window.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6f7baef",
   "metadata": {},
   "outputs": [],
   "source": [
    "can you change the headings in excel to become bold?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
